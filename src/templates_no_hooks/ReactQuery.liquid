import { {{ Class }} as {{ Class }}Class } from '../client';
import { getBaseUrl } from './helpers';

{%- if HasOperations -%}
    {%- assign QueryClassName = Class | prepend: 'Qqqqqq' | slice: 0, Class.size | append: "Query" | slice: 6, 1000 -%}

    {%- for operation in Operations -%}
        {%- if operation.HttpMethodUpper == 'Get' -%}
            {%- if operation.Parameters.size > 0 -%}

                {%- assign firstLetter = operation.ActualOperationName | slice: 0, 1 | upcase -%}
                {%- assign parameterClassName = operation.ActualOperationName | append: 'q' | slice: 1, operation.ActualOperationName.size | prepend: firstLetter | slice: 0, operation.ActualOperationName.size | append: QueryClassName | append: 'Parameters' -%}
type {{ parameterClassName }} = {
{%- for parameter in operation.Parameters -%}
    {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type | prepend: 'Types.' }}{{ parameter.TypePostfix }};
{%- endfor -%}
};

            {%- endif -%}
        {%- endif -%}
    {%- endfor -%}

function baseUrl() {
  return getBaseUrl() ?? '' + '{{ BaseUrl }}';
}

{% template ReactQuery.GetClientFunction %}

    {%- for operation in Operations -%}
        {%- if operation.HttpMethodUpper == 'Get' -%}
            {% assign ResultType = operation.ResultType %}
            {%- assign firstLetter = operation.ActualOperationName | slice: 0, 1 | upcase -%}
            {%- assign parameterClassName = operation.ActualOperationName | append: 'q' | slice: 1, operation.ActualOperationName.size | prepend: firstLetter | slice: 0, operation.ActualOperationName.size | append: QueryClassName | append: 'Parameters' -%}

export function {{ operation.ActualOperationName }}Url({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type | prepend: 'Types.' }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false %}, {% endif %}{% endfor %}): string {
  {% template Client.RequestUrl %}
  return url_;
}

        {% endif -%}
    {% endfor -%}
{% endif -%}
