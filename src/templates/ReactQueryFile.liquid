import { useQuery, UseQueryResult, QueryFunctionContext, UseQueryOptions, QueryClient } from 'react-query';

function removeUndefinedFromArrayTail(arr: any[]): any[] {
    let lastDefinedValueIndex = arr.length - 1;
    while (lastDefinedValueIndex >= 0) {
        if (arr[lastDefinedValueIndex] === undefined) {
            lastDefinedValueIndex--;
        } else {
            break;
        }
    }
    return lastDefinedValueIndex === arr.length - 1 ? arr : arr.slice(0, lastDefinedValueIndex + 1);
}

type ClientFactoryFunction = <T>(type: (new (...params: any[]) => T)) => T;
let _clientFactoryFunction: ClientFactoryFunction = <T>(type: (new (...params: any[]) => T)) => {
{%         if Framework.IsAxios -%}
  const params = [_baseUrl, _axiosFactory()];
{%         endif -%}
{%         if Framework.IsFetchOrAurelia -%}
  const params = [_baseUrl, _fetchFactory()];
{%         endif -%}
  return new type(...params);
};
/*
  Overrides default Client factory function
*/
export function setClientFactory(value: ClientFactoryFunction) {
  _clientFactoryFunction = value;
}

/*
  Returns current Client factory function
*/
export function getClientFactory(value: ClientFactoryFunction) {
  return _clientFactoryFunction;
}

/*
  Function that will be called from `useQuery...` methods to get a client of certain type
*/
function createClient<T>(type: (new () => T)) {
  return _clientFactoryFunction(type);
}

let _baseUrl = '';
export function getBaseUrl(): string {
  return _baseUrl;
}
export function setBaseUrl(baseUrl: string) {
  _baseUrl = baseUrl;
}

{%         if Framework.IsAxios -%}
let _axiosFactory: () => AxiosInstance | undefined = () => undefined;
export function getAxiosFactory() {
  return _axiosFactory;
}
export function setAxiosFactory(factory: () => AxiosInstance) {
  _axiosFactory = factory;
}
{%         endif -%}
{%         if Framework.IsFetchOrAurelia -%}
let _fetchFactory = () => <any>window;
export function getFetchFactory(): () => { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }  {
  return _fetchFactory;
}
export function setFetchFactory(factory: () => { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
  _fetchFactory = factory;
}
{%         endif -%}