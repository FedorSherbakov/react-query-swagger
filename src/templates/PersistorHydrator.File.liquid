export function persistorDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);

  client.clientState.queries.forEach((query) => {
    const data: any = query.state.data;

    if (Array.isArray(data)) {
      query.state.data = data.map(elem => constructDtoClass(query.queryKey, elem));
    } else {
      query.state.data = constructDtoClass(query.queryKey, data);
    }

  });

  return client;
}

function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = resultTypesByQueryKey[resultTypeKey];

  if (!constructorFunction) {
    return data;
  }

  const dto = constructorFunction();
  dto.init(data);

  return dto;
}

function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}
