import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  const date = new Date(str as string);
  const isDate = date instanceof Date && !isNaN(date as any) && date.toISOString() === str;
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(client: PersistedClient) {
  client.clientState.queries.forEach((query) => {
    const data: any = query.state.data;
    query.queryKey = query.queryKey.map(x => deserializeDate(x));
  });
}

export function deserializeClassesInQueryData(client: PersistedClient) {
  client.clientState.queries.forEach((query) => {
    const data: any = query.state.data;
    if (Array.isArray(data)) {
      query.state.data = data.map(elem => constructDtoClass(query.queryKey, elem));
    } else {
      query.state.data = constructDtoClass(query.queryKey, data);
    }
  });
}
/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persistorDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  deserializeClassesInQueryData(client);
  deserializeDatesInQueryKeys(client);

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  const dto = constructorFunction();
  dto.init(data);

  return dto;
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersistor() {
  /*--addResultTypeFactory-placeholder--*/
}