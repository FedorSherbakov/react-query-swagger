//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.17.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "/v2";

    }

    /**
     * uploads an image
     * @param petId ID of pet to update
     * @param additionalMetadata (optional) Additional data to pass to server
     * @param file (optional) file to upload
     * @return successful operation
     */
    uploadFile(petId: number, additionalMetadata?: string | null | undefined, file?: FileParameter | null | undefined , cancelToken?: CancelToken | undefined): Promise<ApiResponse> {
        let url_ = this.baseUrl + "/pet/{petId}/uploadImage";

        if (petId === undefined || petId === null)
          throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (additionalMetadata !== null && additionalMetadata !== undefined)
            content_.append("additionalMetadata", additionalMetadata.toString());
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: AxiosResponse): Promise<ApiResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ApiResponse.fromJS(resultData200);
            return Promise.resolve<ApiResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ApiResponse>(null as any);
    }

    /**
     * Add a new pet to the store
     * @param body Pet object that needs to be added to the store
     */
    addPet(body: Pet , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/pet";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddPet(_response);
        });
    }

    protected processAddPet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 405) {
            const _responseText = response.data;
            return throwException("Invalid input", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Update an existing pet
     * @param body Pet object that needs to be added to the store
     */
    updatePet(body: Pet , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/pet";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdatePet(_response);
        });
    }

    protected processUpdatePet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Pet not found", status, _responseText, _headers);

        } else if (status === 405) {
            const _responseText = response.data;
            return throwException("Validation exception", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Finds Pets by status
     * @param status Status values that need to be considered for filter
     * @return successful operation
     */
    findPetsByStatus(status: Status[] , cancelToken?: CancelToken | undefined): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByStatus?";
          if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined and cannot be null.");
          else
            status && status.forEach(item => { url_ += "status=" + encodeURIComponent("" + item) + "&"; });
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFindPetsByStatus(_response);
        });
    }

    protected processFindPetsByStatus(response: AxiosResponse): Promise<Pet[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Pet.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Pet[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid status value", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet[]>(null as any);
    }

    /**
     * Finds Pets by tags
     * @param tags Tags to filter by
     * @return successful operation
     * @deprecated
     */
    findPetsByTags(tags: string[] , cancelToken?: CancelToken | undefined): Promise<Pet[]> {
        let url_ = this.baseUrl + "/pet/findByTags?";
          if (tags === undefined || tags === null)
            throw new Error("The parameter 'tags' must be defined and cannot be null.");
          else
            tags && tags.forEach(item => { url_ += "tags=" + encodeURIComponent("" + item) + "&"; });
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFindPetsByTags(_response);
        });
    }

    protected processFindPetsByTags(response: AxiosResponse): Promise<Pet[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Pet.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<Pet[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid tag value", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet[]>(null as any);
    }

    /**
     * Find pet by ID
     * @param petId ID of pet to return
     * @return successful operation
     */
    getPetById(petId: number , cancelToken?: CancelToken | undefined): Promise<Pet> {
        let url_ = this.baseUrl + "/pet/{petId}";

        if (petId === undefined || petId === null)
          throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPetById(_response);
        });
    }

    protected processGetPetById(response: AxiosResponse): Promise<Pet> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Pet.fromJS(resultData200);
            return Promise.resolve<Pet>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Pet not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Pet>(null as any);
    }

    /**
     * Updates a pet in the store with form data
     * @param petId ID of pet that needs to be updated
     * @param name (optional) Updated name of the pet
     * @param status (optional) Updated status of the pet
     */
    updatePetWithForm(petId: number, name?: string | null | undefined, status?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";

        if (petId === undefined || petId === null)
          throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
          url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (name !== undefined)
            content_ += encodeURIComponent("name") + "=" + encodeURIComponent("" + name) + "&";
        if (status !== undefined)
            content_ += encodeURIComponent("status") + "=" + encodeURIComponent("" + status) + "&";
        content_ = content_.replace(/&$/, "");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdatePetWithForm(_response);
        });
    }

    protected processUpdatePetWithForm(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 405) {
            const _responseText = response.data;
            return throwException("Invalid input", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Deletes a pet
     * @param petId Pet id to delete
     * @param api_key (optional) 
     */
    deletePet(petId: number, api_key?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/pet/{petId}";

        if (petId === undefined || petId === null)
          throw new Error("The parameter 'petId' must be defined.");
        url_ = url_.replace("{petId}", encodeURIComponent("" + petId));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
                "api_key": api_key !== undefined && api_key !== null ? "" + api_key : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeletePet(_response);
        });
    }

    protected processDeletePet(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Pet not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Place an order for a pet
     * @param body order placed for purchasing the pet
     * @return successful operation
     */
    placeOrder(body: Order , cancelToken?: CancelToken | undefined): Promise<Order> {
        let url_ = this.baseUrl + "/store/order";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPlaceOrder(_response);
        });
    }

    protected processPlaceOrder(response: AxiosResponse): Promise<Order> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Order.fromJS(resultData200);
            return Promise.resolve<Order>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid Order", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Order>(null as any);
    }

    /**
     * Find purchase order by ID
     * @param orderId ID of pet that needs to be fetched
     * @return successful operation
     */
    getOrderById(orderId: number , cancelToken?: CancelToken | undefined): Promise<Order> {
        let url_ = this.baseUrl + "/store/order/{orderId}";

        if (orderId === undefined || orderId === null)
          throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOrderById(_response);
        });
    }

    protected processGetOrderById(response: AxiosResponse): Promise<Order> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Order.fromJS(resultData200);
            return Promise.resolve<Order>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Order not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Order>(null as any);
    }

    /**
     * Delete purchase order by ID
     * @param orderId ID of the order that needs to be deleted
     */
    deleteOrder(orderId: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/store/order/{orderId}";

        if (orderId === undefined || orderId === null)
          throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteOrder(_response);
        });
    }

    protected processDeleteOrder(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid ID supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("Order not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Returns pet inventories by status
     * @return successful operation
     */
    getInventory(  cancelToken?: CancelToken | undefined): Promise<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/store/inventory";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetInventory(_response);
        });
    }

    protected processGetInventory(response: AxiosResponse): Promise<{ [key: string]: number; }> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<{ [key: string]: number; }>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<{ [key: string]: number; }>(null as any);
    }

    /**
     * Creates list of users with given input array
     * @param body List of user object
     * @return successful operation
     */
    createUsersWithArrayInput(body: User[] , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/user/createWithArray";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUsersWithArrayInput(_response);
        });
    }

    protected processCreateUsersWithArrayInput(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        }
    }

    /**
     * Creates list of users with given input array
     * @param body List of user object
     * @return successful operation
     */
    createUsersWithListInput(body: User[] , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/user/createWithList";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUsersWithListInput(_response);
        });
    }

    protected processCreateUsersWithListInput(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        }
    }

    /**
     * Get user by user name
     * @param username The name that needs to be fetched. Use user1 for testing.
     * @return successful operation
     */
    getUserByName(username: string , cancelToken?: CancelToken | undefined): Promise<User> {
        let url_ = this.baseUrl + "/user/{username}";

        if (username === undefined || username === null)
          throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserByName(_response);
        });
    }

    protected processGetUserByName(response: AxiosResponse): Promise<User> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = User.fromJS(resultData200);
            return Promise.resolve<User>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid username supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("User not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<User>(null as any);
    }

    /**
     * Updated user
     * @param username name that need to be updated
     * @param body Updated user object
     */
    updateUser(username: string, body: User , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/user/{username}";

        if (username === undefined || username === null)
          throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUser(_response);
        });
    }

    protected processUpdateUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid user supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("User not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Delete user
     * @param username The name that needs to be deleted
     */
    deleteUser(username: string , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/user/{username}";

        if (username === undefined || username === null)
          throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid username supplied", status, _responseText, _headers);

        } else if (status === 404) {
            const _responseText = response.data;
            return throwException("User not found", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Logs user into the system
     * @param username The user name for login
     * @param password The password for login in clear text
     * @return successful operation
     */
    loginUser(username: string, password: string , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/user/login?";
          if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined and cannot be null.");
          else
            url_ += "username=" + encodeURIComponent("" + username) + "&";
          if (password === undefined || password === null)
            throw new Error("The parameter 'password' must be defined and cannot be null.");
          else
            url_ += "password=" + encodeURIComponent("" + password) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLoginUser(_response);
        });
    }

    protected processLoginUser(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            return throwException("Invalid username/password supplied", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * Logs out current logged in user session
     * @return successful operation
     */
    logoutUser(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/user/logout";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogoutUser(_response);
        });
    }

    protected processLogoutUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        }
    }

    /**
     * Create user
     * @param body Created user object
     * @return successful operation
     */
    createUser(body: User , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/user";
          url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCreateUser(_response);
        });
    }

    protected processCreateUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        }
    }
}

export * as Query from './axios-client/Query';

addResultTypeFactory('Client___findPetsByStatus', () => new Pet());
addResultTypeFactory('Client___findPetsByTags', () => new Pet());
addResultTypeFactory('Client___getPetById', () => new Pet());
addResultTypeFactory('Client___getOrderById', () => new Order());
addResultTypeFactory('Client___getUserByName', () => new User());

export class ApiResponse implements IApiResponse {
    code?: number | null;
    type?: string | null;
    message?: string | null;

    constructor(data?: IApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.type = _data["type"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["type"] = this.type;
        data["message"] = this.message;
        return data;
    }
}

export interface IApiResponse {
    code?: number | null;
    type?: string | null;
    message?: string | null;
}

export class Category implements ICategory {
    id?: number | null;
    name?: string | null;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ICategory {
    id?: number | null;
    name?: string | null;
}

export class Pet implements IPet {
    id?: number | null;
    category?: Category | null;
    name!: string;
    photoUrls!: string[];
    tags?: Tag[] | null;
    /** pet status in the store */
    status?: PetStatus | null;

    constructor(data?: IPet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.photoUrls = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>null;
            this.name = _data["name"];
            if (Array.isArray(_data["photoUrls"])) {
                this.photoUrls = [] as any;
                for (let item of _data["photoUrls"])
                    this.photoUrls!.push(item);
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(Tag.fromJS(item));
            }
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): Pet {
        data = typeof data === 'object' ? data : {};
        let result = new Pet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["category"] = this.category ? this.category.toJSON() : <any>null;
        data["name"] = this.name;
        if (Array.isArray(this.photoUrls)) {
            data["photoUrls"] = [];
            for (let item of this.photoUrls)
                data["photoUrls"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["status"] = this.status;
        return data;
    }
}

export interface IPet {
    id?: number | null;
    category?: Category | null;
    name: string;
    photoUrls: string[];
    tags?: Tag[] | null;
    /** pet status in the store */
    status?: PetStatus | null;
}

export class Tag implements ITag {
    id?: number | null;
    name?: string | null;

    constructor(data?: ITag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Tag {
        data = typeof data === 'object' ? data : {};
        let result = new Tag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface ITag {
    id?: number | null;
    name?: string | null;
}

export class Order implements IOrder {
    id?: number | null;
    petId?: number | null;
    quantity?: number | null;
    shipDate?: Date | null;
    /** Order Status */
    status?: OrderStatus | null;
    complete?: boolean | null;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.petId = _data["petId"];
            this.quantity = _data["quantity"];
            this.shipDate = _data["shipDate"] ? new Date(_data["shipDate"].toString()) : <any>null;
            this.status = _data["status"];
            this.complete = _data["complete"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["petId"] = this.petId;
        data["quantity"] = this.quantity;
        data["shipDate"] = this.shipDate && this.shipDate.toISOString();
        data["status"] = this.status;
        data["complete"] = this.complete;
        return data;
    }
}

export interface IOrder {
    id?: number | null;
    petId?: number | null;
    quantity?: number | null;
    shipDate?: Date | null;
    /** Order Status */
    status?: OrderStatus | null;
    complete?: boolean | null;
}

export class User implements IUser {
    id?: number | null;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    password?: string | null;
    phone?: string | null;
    /** User Status */
    userStatus?: number | null;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.phone = _data["phone"];
            this.userStatus = _data["userStatus"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["password"] = this.password;
        data["phone"] = this.phone;
        data["userStatus"] = this.userStatus;
        return data;
    }
}

export interface IUser {
    id?: number | null;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    email?: string | null;
    password?: string | null;
    phone?: string | null;
    /** User Status */
    userStatus?: number | null;
}

export enum Status {
    Available = "available",
    Pending = "pending",
    Sold = "sold",
}

export enum PetStatus {
    Available = "available",
    Pending = "pending",
    Sold = "sold",
}

export enum OrderStatus {
    Placed = "placed",
    Approved = "approved",
    Delivered = "delivered",
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  const date = new Date(str as string);
  const isDate = date instanceof Date && !isNaN(date as any) && date.toISOString() === str;
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(client: PersistedClient) {
  client.clientState.queries.forEach((query) => {
    const data: any = query.state.data;
    query.queryKey = query.queryKey.map(x => deserializeDate(x));
  });
}

export function deserializeClassesInQueryData(client: PersistedClient) {
  client.clientState.queries.forEach((query) => {
    const data: any = query.state.data;
    if (Array.isArray(data)) {
      query.state.data = data.map(elem => constructDtoClass(query.queryKey, elem));
    } else {
      query.state.data = constructDtoClass(query.queryKey, data);
    }
  });
}
/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persistorDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  deserializeClassesInQueryData(client);
  deserializeDatesInQueryKeys(client);

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  const dto = constructorFunction();
  dto.init(data);

  return dto;
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}
//-----/PersistorHydrator.File----